unit WinCash.Business.Desconto.RateamentoAliquotaVendedorProduto;

interface

uses
  Gsoft.Model.LancamentoVenda.Item,
  Gsoft.Model.ValorMonetario,
  Gsoft.Model.AliquotaDesconto,
  Gsoft.Model.InterfaceDesconto,
  WinCash.Business.Desconto.AliquotaVendedorProduto;

type
  TDescontoRateamentoAliquotaVendedorProduto = class(TInterfacedObject, IDesconto)
  private
    procedure aplicarDescontoProduto(valorTotalDesconto : TValorMonetario;
      valorTotalItens : TValorMonetario; item : TLancamentoVendaItem;
      aliquotaDescontoVendedor : TAliquotaDesconto);
  public
    function getDescontoMaximo(aliquotaDescontoGeral: TAliquotaDesconto;
      listaItens: TLancamentoVendaItemLista): TValorMonetario;
    function isValorLiquidoValido(valorLiquido: TValorMonetario;
      aliquotaDescontoGeral: TAliquotaDesconto;
      listaItens: TLancamentoVendaItemLista): Boolean;
    function ratear(valorLiquido: TValorMonetario;
      aliquotaDescontoGeral: TAliquotaDesconto;
      listaItens: TLancamentoVendaItemLista): Boolean;
  end;


implementation

{ TDescontoRateamentoAliquotaVendedorProduto }

procedure TDescontoRateamentoAliquotaVendedorProduto.aplicarDescontoProduto(valorTotalDesconto : TValorMonetario;
      valorTotalItens : TValorMonetario; item : TLancamentoVendaItem;
      aliquotaDescontoVendedor : TAliquotaDesconto);
var
  pesoItem : double;
  desconto : TDescontoAliquotaVendedorProduto;
  valorDescontoAplicadoItem, valorLiquidoFinal : TValorMonetario;
begin
  desconto := TDescontoAliquotaVendedorProduto.Create(aliquotaDescontoVendedor,
    item.produto.DescontoMaximo);
  pesoItem := item.valorTotalBruto.valor / valorTotalItens.valor;
  valorDescontoAplicadoItem := TValorMonetario.Create(valorTotalDesconto.valor * pesoItem);
  valorLiquidoFinal := TValorMonetario.Create(
    item.valorTotalBruto.valor -
    item.valorTotalDesconto.valor -
    valorDescontoAplicadoItem.valor
    );

  if desconto.isValorLiquidoValido(valorLiquidoFinal,item.valorTotalBruto) then
    item.valorDescontoFechamento.valor :=
      item.valorDescontoFechamento.valor + valorDescontoAplicadoItem.valor
  else
    item.valorDescontoFechamento.valor := item.valorDescontoFechamento.valor + item.valorDescontoDisponivel.valor;
end;

function TDescontoRateamentoAliquotaVendedorProduto.getDescontoMaximo(
  aliquotaDescontoGeral: TAliquotaDesconto;
  listaItens: TLancamentoVendaItemLista): TValorMonetario;
var
  descontoVendProd: TDescontoAliquotaVendedorProduto;
  item : TLancamentoVendaItem;
begin
  result := TValorMonetario.Create(0);
  for item in listaItens do
  begin
    descontoVendProd := TDescontoAliquotaVendedorProduto.Create(
      aliquotaDescontoGeral, item.produto.DescontoMaximo);
    result := result.valor + descontoVendProd.descontoMaximo(item.valorTotalBruto);
    descontoVendProd.Free();
  end;
end;

function TDescontoRateamentoAliquotaVendedorProduto.isValorLiquidoValido(
  valorLiquido: TValorMonetario; aliquotaDescontoGeral: TAliquotaDesconto;
  listaItens: TLancamentoVendaItemLista): Boolean;
var
  valorMinimo, valorDescontoMaximo: TValorMonetario;
begin
  valorDescontoMaximo := self.getDescontoMaximo(aliquotaDescontoGeral, listaItens);
  valorMinimo := TValorMonetario.Create(
    listaItens.valorTotalBruto.valor - valorDescontoMaximo.valor
  );
  result := self.getDescontoMaximo(aliquotaDescontoGeral, listaItens).Equals(

  );
end;

function TDescontoRateamentoAliquotaVendedorProduto.ratear(valorLiquido: TValorMonetario;
      aliquotaDescontoGeral: TAliquotaDesconto;
      listaItens: TLancamentoVendaItemLista): Boolean;
var
  itensElegiveisDesconto : TLancamentoVendaItemLista;
  item: TLancamentoVendaItem;
  valorDescontoRestante : TValorMonetario;
begin
  itensElegiveisDesconto := TLancamentoVendaItemLista.Create();
  valorDescontoRestante := TValorMonetario.Create(0);
  for item in listaItens do
    item.valorDescontoFechamento.valor := 0;
  repeat
    itensElegiveisDesconto.Clear();
    for item in listaItens do
    begin
      if item.valorDescontoDisponivel.valor > 0  then
        itensElegiveisDesconto.Add(item);
    end;
    valorDescontoRestante.valor := listaItens.valorTotalLiquido.valor - valorLiquido.valor;
    for item in itensElegiveisDesconto do
    begin
      aplicarDescontoProduto(valorDescontoRestante, itensElegiveisDesconto.valorTotalBruto, item, aliquotaDescontoGeral);
    end;
  until (itensElegiveisDesconto.Count = 0) or (listaItens.valorTotalLiquido.Equals(valorLiquido));
end;

end.
