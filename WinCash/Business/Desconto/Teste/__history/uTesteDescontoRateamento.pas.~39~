unit uTesteDescontoRateamento;

interface

uses
  SysUtils,
  TestFramework,
  Gsoft.Model.LancamentoVenda.Item,
  Gsoft.Model.Produto,
  WinCash.Business.Desconto.RateamentoDesconto,
  WinCash.Business.Desconto.AliquotaGeral,
  WinCash.Business.Desconto.AliquotaDesconto;

type
  TTesteDescontoRateamento = class(TTestCase)
  private
    listaItens : TLancamentoVendaItemLista;

  protected
    procedure SetUp; override;
    procedure TearDown; override;


  published
    procedure testeRateamentoDescontoAliquotaGeral();
    procedure testeRateamento

  end;

implementation

{ TTesteDescontoRateamento }

procedure TTesteDescontoRateamento.SetUp;
var
  produto: TProduto;
  item: TLancamentoVendaItem;
begin
  inherited;
  listaItens := TLancamentoVendaItemLista.Create();
  produto := TProduto.Create();
  produto.Codigo := 1;
  produto.Produto := 'COCA-COLA LATA';
  produto.CustoRealUnitario := 1.89;
  produto.PrecoVenda := 3.50;
  produto.DescontoMaximo := 5;
  listaItens.Add(TLancamentoVendaItem.Create(produto));
end;

procedure TTesteDescontoRateamento.TearDown;
begin
  inherited;
  listaItens.Free();
end;

procedure TTesteDescontoRateamento.testeRateamentoDescontoAliquotaGeral();
var
  rateamento: TRateamentoDescontoAliquotaGeral;
begin
  rateamento := TRateamentoDescontoAliquotaGeral.Create();
  rateamento.ratear(
    TDescontoAliquotaGeral.Create(TAliquotaDesconto.Create(10)),
    3.15,
    listaItens);
  checkTrue(
    abs(listaItens.valorTotalBruto * 0.9 - listaItens.valorTotalLiquido) < 0.01,
    format(
      'esperado <%f>, recebido <%f>',
      [listaItens.valorTotalBruto * 0.9, listaItens.valorTotalLiquido]
    )
  );
end;

initialization
  TestFramework.RegisterTest('TTesteDescontoRateamento Teste', TTesteDescontoRateamento.Suite);

end.
